<!DOCTYPE html>
<html lang="en">

<head>
	<title>Mono-/Stereoscopic Video Viewer</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<link type="text/css" rel="stylesheet" href="css/main.css">
	<script src="libs/modernizr.js"></script>
</head>

<body>
	<div id="overlay">
		<div class="bg"></div>
		<div class='content'>
			<p>Please select</p>
			<button id="startMonoscopic">
				<i class="icon-vr icon-vr-cardboard-monoscopic"></i>
				<span>Start <br>Monoscopic VR</span>
			</button>

			<button id="startStereoscopic">
				<i class="icon-vr icon-vr-cardboard-stereoscopic"></i>
				<span>Start <br>Stereoscopic VR</span>
			</button>
		</div>
	</div>

	<video id="video" preload loop muted crossOrigin="anonymous" playsinline style="display:none"
		src="https://lehre.gabriel-rausch.de/HFU/IFD_SoSe20/L06/L06_01_Microinteractions_Einfuehrung.mp4"></video>

	<audio id="audio" preload loop crossOrigin="anonymous" style="display:none" playsinline
		src="https://lehre.gabriel-rausch.de/HFU/IFD_SoSe20/L06/L06_01_Microinteractions_Einfuehrung.mp3"></audio>

	<script type="module">

		import * as THREE from './libs/three.module.js';

		import { StereoEffect } from './libs/StereoEffect.js';

		import { DeviceOrientationControls } from './libs/DeviceOrientationControls.js';

		/**
		 * set rich media resources from hash in url
		 * e.g. 127.0.0.1:5500/mono-stereoscopic-video-viewer/index.html#assets/L06_01_Microinteractions_Einfuehrung
		 */
		var hash = window.location.hash.substring(1,window.location.hash.length);
		var file = hash.split('&')[0];
		var rotationParam = 0;
		if(hash.split('&')[1]) rotationParam = hash.split('&')[1];

		document.querySelector('#video').setAttribute('src', file + '.mp4');
		document.querySelector('#audio').setAttribute('src', file + '.mp3');
		document.querySelector('#overlay .bg').style.backgroundImage = 'url(' + file + '.jpg)';

		var container, camera, scene, renderer, effect, controls;

		var isUserInteracting = false,
			lon = 0, lat = 0,
			phi = 0, theta = 0,
			distance = 200,
			onPointerDownPointerX = 0,
			onPointerDownPointerY = 0,
			onPointerDownLon = 0,
			onPointerDownLat = 0;

		var mouseX = 0, mouseY = 0;

		var windowHalfX = window.innerWidth / 2;
		var windowHalfY = window.innerHeight / 2;

		var stereoscopicEnabled;

		var gyroPresent = false;

		document.getElementById('startMonoscopic').addEventListener('click', function () {
			stereoscopicEnabled = false;
			init();
			animate();
		}, false);

		document.getElementById('startStereoscopic').addEventListener('click', function () {
			stereoscopicEnabled = true;
			init();
			animate();
		}, false);

		function init() {
			var overlay = document.getElementById('overlay');
			overlay.remove();

			container = document.createElement('div');
			document.body.appendChild(container);

			camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1100);
			camera.target = new THREE.Vector3(0, 0, 0);

			controls = new DeviceOrientationControls(camera);
			controls.enabled = false;

			scene = new THREE.Scene();

			/**
			 * Create 360 video sphere
			 */
			var sphereGeometry = new THREE.SphereBufferGeometry(500, 60, 40);
			sphereGeometry.scale(- 1, 1, 1);


			var video = document.getElementById('video');
			video.play();

			var texture = new THREE.VideoTexture(video);
			var material = new THREE.MeshBasicMaterial({ map: texture });

			var mesh = new THREE.Mesh(sphereGeometry, material);

			var intialRotation = 180;
			if (rotationParam) intialRotation = rotationParam;
			mesh.rotation.y = degToRad(rotationParam);

			scene.add(mesh);


			var audio = document.getElementById('audio');
			audio.play();

			renderer = new THREE.WebGLRenderer();
			renderer.setPixelRatio(window.devicePixelRatio);
			renderer.setSize(window.innerWidth, window.innerHeight);
			container.appendChild(renderer.domElement);

			if (stereoscopicEnabled) {
				effect = new StereoEffect(renderer);
				effect.setSize(window.innerWidth, window.innerHeight);
			} else {
				renderer.render(scene, camera);
			}

			document.addEventListener('mousedown', onDocumentMouseDown, false);
			document.addEventListener('mousemove', onDocumentMouseMove, false);
			document.addEventListener('mouseup', onDocumentMouseUp, false);
			window.addEventListener('resize', onWindowResize, false);
		}

    		function degToRad(degrees) {
        		return degrees * Math.PI / 180.0;
    		}

		function onWindowResize() {

			windowHalfX = window.innerWidth / 2;
			windowHalfY = window.innerHeight / 2;

			camera.aspect = window.innerWidth / window.innerHeight;
			camera.updateProjectionMatrix();

			if (stereoscopicEnabled) {
				effect.setSize(window.innerWidth, window.innerHeight);
			} else {
				renderer.render(scene, camera);
			}
		}

		function onDocumentMouseDown(event) {

			event.preventDefault();

			isUserInteracting = true;

			onPointerDownPointerX = event.clientX;
			onPointerDownPointerY = event.clientY;

			onPointerDownLon = lon;
			onPointerDownLat = lat;

		}

		function onDocumentMouseMove(event) {
			if (isUserInteracting === true) {

				lon = (onPointerDownPointerX - event.clientX) * 0.1 + onPointerDownLon;
				lat = (event.clientY - onPointerDownPointerY) * 0.1 + onPointerDownLat;

			}

		}

		function onDocumentMouseUp() {

			isUserInteracting = false;

		}

		function animate() {

			requestAnimationFrame(animate);


			lat = Math.max(- 85, Math.min(85, lat));
			phi = THREE.MathUtils.degToRad(90 - lat);
			theta = THREE.MathUtils.degToRad(lon);

			camera.position.x = distance * Math.sin(phi) * Math.cos(theta);
			camera.position.y = distance * Math.cos(phi);
			camera.position.z = distance * Math.sin(phi) * Math.sin(theta);

			camera.lookAt(camera.target);

			if (Modernizr.deviceorientation && controls.deviceOrientation.alpha) {
				controls.enabled = true;
			} else {
				controls.enabled = false;
			}

			controls.update();

			if (stereoscopicEnabled) {
				effect.render(scene, camera);
			} else {
				renderer.render(scene, camera);
			}

		}

	</script>

</body>

</html>